const { Adapter } = require("./lib/adapter");

exports.builder = new Adapter.Builder().tx().shape((chunk) => {
  let { barcode, ...other } = chunk;
  return Buffer.from(
    `^XA
    ^CFS,30
    ^FO25,25^GB782,3,3^FS
    ^FO25,25^GB3,430,3^FS
    ^FO25,455^GB785,3,3^FS
    ^FO807,25^GB3,430,3^FS
    ${Object.keys(other)
      .map(
        (key, index) => `^FO60,${60 + index * 40}^FD${key}: ${other[key]}^FS`
      )
      .join("\n")}

    ^FO612,250^BQN,2,5^FDQA,${barcode}^FS
    ^XZ`,
    "ascii"
  );
});
